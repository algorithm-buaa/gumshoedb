// WARNING: AUTOGENERATED CODE
// Do not edit by hand (see gen.go).

package gumshoe

import (
	"math"
	"unsafe"
)

type Type int

const (
	TypeUint8   Type = iota
	TypeInt8    Type = iota
	TypeUint16  Type = iota
	TypeInt16   Type = iota
	TypeUint32  Type = iota
	TypeInt32   Type = iota
	TypeFloat32 Type = iota
)

var typeWidths = []int{
	TypeUint8:   int(unsafe.Sizeof(uint8(0))),
	TypeInt8:    int(unsafe.Sizeof(int8(0))),
	TypeUint16:  int(unsafe.Sizeof(uint16(0))),
	TypeInt16:   int(unsafe.Sizeof(int16(0))),
	TypeUint32:  int(unsafe.Sizeof(uint32(0))),
	TypeInt32:   int(unsafe.Sizeof(int32(0))),
	TypeFloat32: int(unsafe.Sizeof(float32(0))),
}

var typeMaxes = []float64{
	TypeUint8:   math.MaxUint8,
	TypeInt8:    math.MaxInt8,
	TypeUint16:  math.MaxUint16,
	TypeInt16:   math.MaxInt16,
	TypeUint32:  math.MaxUint32,
	TypeInt32:   math.MaxInt32,
	TypeFloat32: math.MaxFloat32,
}

var typeNames = []string{
	TypeUint8:   "uint8",
	TypeInt8:    "int8",
	TypeUint16:  "uint16",
	TypeInt16:   "int16",
	TypeUint32:  "uint32",
	TypeInt32:   "int32",
	TypeFloat32: "float32",
}

var NameToType = map[string]Type{
	"uint8":   TypeUint8,
	"int8":    TypeInt8,
	"uint16":  TypeUint16,
	"int16":   TypeInt16,
	"uint32":  TypeUint32,
	"int32":   TypeInt32,
	"float32": TypeFloat32,
}

// add adds other to m (only m is modified).
func (m MetricBytes) add(s *Schema, other MetricBytes) {
	p1 := uintptr(unsafe.Pointer(&m[0]))
	p2 := uintptr(unsafe.Pointer(&other[0]))
	for i, column := range s.MetricColumns {
		offset := uintptr(s.MetricOffsets[i])
		col1 := unsafe.Pointer(p1 + offset)
		col2 := unsafe.Pointer(p2 + offset)
		switch column.Type {
		case TypeUint8:
			*(*uint8)(col1) = *(*uint8)(col1) + (*(*uint8)(col2))
		case TypeInt8:
			*(*int8)(col1) = *(*int8)(col1) + (*(*int8)(col2))
		case TypeUint16:
			*(*uint16)(col1) = *(*uint16)(col1) + (*(*uint16)(col2))
		case TypeInt16:
			*(*int16)(col1) = *(*int16)(col1) + (*(*int16)(col2))
		case TypeUint32:
			*(*uint32)(col1) = *(*uint32)(col1) + (*(*uint32)(col2))
		case TypeInt32:
			*(*int32)(col1) = *(*int32)(col1) + (*(*int32)(col2))
		case TypeFloat32:
			*(*float32)(col1) = *(*float32)(col1) + (*(*float32)(col2))
		}
	}
}

func setRowValue(pos unsafe.Pointer, typ Type, value float64) {
	switch typ {
	case TypeUint8:
		*(*uint8)(pos) = uint8(value)
	case TypeInt8:
		*(*int8)(pos) = int8(value)
	case TypeUint16:
		*(*uint16)(pos) = uint16(value)
	case TypeInt16:
		*(*int16)(pos) = int16(value)
	case TypeUint32:
		*(*uint32)(pos) = uint32(value)
	case TypeInt32:
		*(*int32)(pos) = int32(value)
	case TypeFloat32:
		*(*float32)(pos) = float32(value)
	}
}

// numericCellValue decodes a numeric value from cell based on typ. It does not look into any dimension
// tables.
func (s *State) numericCellValue(cell unsafe.Pointer, typ Type) Untyped {
	switch typ {
	case TypeUint8:
		return *(*uint8)(cell)
	case TypeInt8:
		return *(*int8)(cell)
	case TypeUint16:
		return *(*uint16)(cell)
	case TypeInt16:
		return *(*int16)(cell)
	case TypeUint32:
		return *(*uint32)(cell)
	case TypeInt32:
		return *(*int32)(cell)
	case TypeFloat32:
		return *(*float32)(cell)
	}
	panic("unexpected type")
}

// Query helper functions

type FilterType int

const (
	FilterEqual              FilterType = iota
	FilterNotEqual           FilterType = iota
	FilterGreaterThan        FilterType = iota
	FilterGreaterThenOrEqual FilterType = iota
	FilterLessThan           FilterType = iota
	FilterLessThanOrEqual    FilterType = iota
	FilterIn                 FilterType = iota
)

var filterTypeToName = []string{
	FilterEqual:              "=",
	FilterNotEqual:           "!=",
	FilterGreaterThan:        ">",
	FilterGreaterThenOrEqual: ">=",
	FilterLessThan:           "<",
	FilterLessThanOrEqual:    "<=",
	FilterIn:                 "in",
}

var filterNameToType = map[string]FilterType{
	"=":  FilterEqual,
	"!=": FilterNotEqual,
	">":  FilterGreaterThan,
	">=": FilterGreaterThenOrEqual,
	"<":  FilterLessThan,
	"<=": FilterLessThanOrEqual,
	"in": FilterIn,
}

func makeSumFuncGen(typ Type) func(offset int) sumFunc {

	if typ == TypeUint8 {
		return func(offset int) sumFunc {
			return func(sum UntypedBytes, metrics MetricBytes) {
				*(*uint8)(unsafe.Pointer(&sum[0])) += *(*uint8)(unsafe.Pointer(&metrics[offset]))
			}
		}
	}
	if typ == TypeInt8 {
		return func(offset int) sumFunc {
			return func(sum UntypedBytes, metrics MetricBytes) {
				*(*int8)(unsafe.Pointer(&sum[0])) += *(*int8)(unsafe.Pointer(&metrics[offset]))
			}
		}
	}
	if typ == TypeUint16 {
		return func(offset int) sumFunc {
			return func(sum UntypedBytes, metrics MetricBytes) {
				*(*uint16)(unsafe.Pointer(&sum[0])) += *(*uint16)(unsafe.Pointer(&metrics[offset]))
			}
		}
	}
	if typ == TypeInt16 {
		return func(offset int) sumFunc {
			return func(sum UntypedBytes, metrics MetricBytes) {
				*(*int16)(unsafe.Pointer(&sum[0])) += *(*int16)(unsafe.Pointer(&metrics[offset]))
			}
		}
	}
	if typ == TypeUint32 {
		return func(offset int) sumFunc {
			return func(sum UntypedBytes, metrics MetricBytes) {
				*(*uint32)(unsafe.Pointer(&sum[0])) += *(*uint32)(unsafe.Pointer(&metrics[offset]))
			}
		}
	}
	if typ == TypeInt32 {
		return func(offset int) sumFunc {
			return func(sum UntypedBytes, metrics MetricBytes) {
				*(*int32)(unsafe.Pointer(&sum[0])) += *(*int32)(unsafe.Pointer(&metrics[offset]))
			}
		}
	}
	if typ == TypeFloat32 {
		return func(offset int) sumFunc {
			return func(sum UntypedBytes, metrics MetricBytes) {
				*(*float32)(unsafe.Pointer(&sum[0])) += *(*float32)(unsafe.Pointer(&metrics[offset]))
			}
		}
	}
	panic("unreached")
}

func makeGetDimensionValueFuncGen(typ Type) func(cell unsafe.Pointer) Untyped {

	if typ == TypeUint8 {
		return func(cell unsafe.Pointer) Untyped { return *(*uint8)(cell) }
	}
	if typ == TypeInt8 {
		return func(cell unsafe.Pointer) Untyped { return *(*int8)(cell) }
	}
	if typ == TypeUint16 {
		return func(cell unsafe.Pointer) Untyped { return *(*uint16)(cell) }
	}
	if typ == TypeInt16 {
		return func(cell unsafe.Pointer) Untyped { return *(*int16)(cell) }
	}
	if typ == TypeUint32 {
		return func(cell unsafe.Pointer) Untyped { return *(*uint32)(cell) }
	}
	if typ == TypeInt32 {
		return func(cell unsafe.Pointer) Untyped { return *(*int32)(cell) }
	}
	if typ == TypeFloat32 {
		return func(cell unsafe.Pointer) Untyped { return *(*float32)(cell) }
	}
	panic("unreached")
}

func makeGetDimensionValueAsIntFuncGen(typ Type) func(cell unsafe.Pointer) int {

	if typ == TypeUint8 {
		return func(cell unsafe.Pointer) int { return int(*(*uint8)(cell)) }
	}
	if typ == TypeInt8 {
		return func(cell unsafe.Pointer) int { return int(*(*int8)(cell)) }
	}
	if typ == TypeUint16 {
		return func(cell unsafe.Pointer) int { return int(*(*uint16)(cell)) }
	}
	if typ == TypeInt16 {
		return func(cell unsafe.Pointer) int { return int(*(*int16)(cell)) }
	}
	if typ == TypeUint32 {
		return func(cell unsafe.Pointer) int { return int(*(*uint32)(cell)) }
	}
	if typ == TypeInt32 {
		return func(cell unsafe.Pointer) int { return int(*(*int32)(cell)) }
	}
	if typ == TypeFloat32 {
		return func(cell unsafe.Pointer) int { return int(*(*float32)(cell)) }
	}
	panic("unreached")
}

func makeTimestampFilterFuncSimpleGen(filter FilterType) func(timestamp uint32) timestampFilterFunc {

	if filter == FilterEqual {
		return func(timestamp uint32) timestampFilterFunc {
			return func(t uint32) bool { return t == timestamp }
		}
	}
	if filter == FilterNotEqual {
		return func(timestamp uint32) timestampFilterFunc {
			return func(t uint32) bool { return t != timestamp }
		}
	}
	if filter == FilterGreaterThan {
		return func(timestamp uint32) timestampFilterFunc {
			return func(t uint32) bool { return t > timestamp }
		}
	}
	if filter == FilterGreaterThenOrEqual {
		return func(timestamp uint32) timestampFilterFunc {
			return func(t uint32) bool { return t >= timestamp }
		}
	}
	if filter == FilterLessThan {
		return func(timestamp uint32) timestampFilterFunc {
			return func(t uint32) bool { return t < timestamp }
		}
	}
	if filter == FilterLessThanOrEqual {
		return func(timestamp uint32) timestampFilterFunc {
			return func(t uint32) bool { return t <= timestamp }
		}
	}
	panic("unreached")
}

func makeNilFilterFuncSimpleGen(typ Type, filter FilterType) func(nilOffset int, mask byte) filterFunc {

	if typ == TypeUint8 && filter == FilterEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return true
				}
				return false
			}
		}
	}
	if typ == TypeUint8 && filter == FilterNotEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return true
			}
		}
	}
	if typ == TypeUint8 && filter == FilterGreaterThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint8 && filter == FilterGreaterThenOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint8 && filter == FilterLessThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint8 && filter == FilterLessThanOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt8 && filter == FilterEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return true
				}
				return false
			}
		}
	}
	if typ == TypeInt8 && filter == FilterNotEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return true
			}
		}
	}
	if typ == TypeInt8 && filter == FilterGreaterThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt8 && filter == FilterGreaterThenOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt8 && filter == FilterLessThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt8 && filter == FilterLessThanOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint16 && filter == FilterEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return true
				}
				return false
			}
		}
	}
	if typ == TypeUint16 && filter == FilterNotEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return true
			}
		}
	}
	if typ == TypeUint16 && filter == FilterGreaterThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint16 && filter == FilterGreaterThenOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint16 && filter == FilterLessThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint16 && filter == FilterLessThanOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt16 && filter == FilterEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return true
				}
				return false
			}
		}
	}
	if typ == TypeInt16 && filter == FilterNotEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return true
			}
		}
	}
	if typ == TypeInt16 && filter == FilterGreaterThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt16 && filter == FilterGreaterThenOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt16 && filter == FilterLessThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt16 && filter == FilterLessThanOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint32 && filter == FilterEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return true
				}
				return false
			}
		}
	}
	if typ == TypeUint32 && filter == FilterNotEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return true
			}
		}
	}
	if typ == TypeUint32 && filter == FilterGreaterThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint32 && filter == FilterGreaterThenOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint32 && filter == FilterLessThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeUint32 && filter == FilterLessThanOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt32 && filter == FilterEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return true
				}
				return false
			}
		}
	}
	if typ == TypeInt32 && filter == FilterNotEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return true
			}
		}
	}
	if typ == TypeInt32 && filter == FilterGreaterThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt32 && filter == FilterGreaterThenOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt32 && filter == FilterLessThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeInt32 && filter == FilterLessThanOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return true
				}
				return false
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterNotEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return true
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterGreaterThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterGreaterThenOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterLessThan {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterLessThanOrEqual {
		return func(nilOffset int, mask byte) filterFunc {
			return func(row RowBytes) bool {
				// See comparison truth table
				if row[nilOffset]&mask > 0 {
					return false
				}
				return false
			}
		}
	}
	panic("unreached")
}

func makeDimensionFilterFuncSimpleGen(typ Type, filter FilterType, isString bool) func(interface{}, int, byte, int) filterFunc {

	if typ == TypeUint8 && filter == FilterEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterNotEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterNotEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterGreaterThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterGreaterThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterGreaterThenOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterGreaterThenOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterLessThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterLessThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterLessThanOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterLessThanOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint8)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterNotEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterNotEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterGreaterThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterGreaterThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterGreaterThenOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterGreaterThenOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterLessThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterLessThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterLessThanOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterLessThanOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int8(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int8)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterNotEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterNotEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterGreaterThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterGreaterThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterGreaterThenOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterGreaterThenOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterLessThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterLessThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterLessThanOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterLessThanOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint16)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterNotEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterNotEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterGreaterThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterGreaterThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterGreaterThenOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterGreaterThenOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterLessThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterLessThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterLessThanOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterLessThanOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int16(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int16)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterNotEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterNotEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterGreaterThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterGreaterThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterGreaterThenOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterGreaterThenOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterLessThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterLessThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterLessThanOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterLessThanOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := uint32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*uint32)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterNotEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterNotEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterGreaterThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterGreaterThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterGreaterThenOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterGreaterThenOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterLessThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterLessThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterLessThanOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterLessThanOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := int32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*int32)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) == v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterNotEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterNotEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return true
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) != v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterGreaterThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterGreaterThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) > v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterGreaterThenOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterGreaterThenOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) >= v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterLessThan && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterLessThan && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) < v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterLessThanOrEqual && isString == true {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(uint32))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterLessThanOrEqual && isString == false {
		return func(value interface{}, nilOffset int, mask byte, valueOffset int) filterFunc {

			v := float32(value.(float64))

			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return false
				}
				return *(*float32)(unsafe.Pointer(&row[valueOffset])) <= v
			}
		}
	}
	panic("unreached")
}

func makeDimensionFilterFuncInGen(typ Type, isString bool) func(interface{}, bool, int, byte, int) filterFunc {

	if typ == TypeUint8 && isString == true {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []uint8

			for _, v := range values.([]uint32) {

				typedValues = append(typedValues, uint8(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*uint8)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeUint8 && isString == false {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []uint8

			for _, v := range values.([]float64) {

				typedValues = append(typedValues, uint8(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*uint8)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt8 && isString == true {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []int8

			for _, v := range values.([]uint32) {

				typedValues = append(typedValues, int8(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*int8)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt8 && isString == false {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []int8

			for _, v := range values.([]float64) {

				typedValues = append(typedValues, int8(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*int8)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeUint16 && isString == true {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []uint16

			for _, v := range values.([]uint32) {

				typedValues = append(typedValues, uint16(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*uint16)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeUint16 && isString == false {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []uint16

			for _, v := range values.([]float64) {

				typedValues = append(typedValues, uint16(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*uint16)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt16 && isString == true {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []int16

			for _, v := range values.([]uint32) {

				typedValues = append(typedValues, int16(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*int16)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt16 && isString == false {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []int16

			for _, v := range values.([]float64) {

				typedValues = append(typedValues, int16(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*int16)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeUint32 && isString == true {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []uint32

			for _, v := range values.([]uint32) {

				typedValues = append(typedValues, uint32(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*uint32)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeUint32 && isString == false {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []uint32

			for _, v := range values.([]float64) {

				typedValues = append(typedValues, uint32(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*uint32)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt32 && isString == true {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []int32

			for _, v := range values.([]uint32) {

				typedValues = append(typedValues, int32(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*int32)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt32 && isString == false {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []int32

			for _, v := range values.([]float64) {

				typedValues = append(typedValues, int32(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*int32)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeFloat32 && isString == true {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []float32

			for _, v := range values.([]uint32) {

				typedValues = append(typedValues, float32(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*float32)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeFloat32 && isString == false {
		return func(values interface{}, acceptNil bool, nilOffset int, mask byte, valueOffset int) filterFunc {
			var typedValues []float32

			for _, v := range values.([]float64) {

				typedValues = append(typedValues, float32(v))
			}
			return func(row RowBytes) bool {
				if row[nilOffset]&mask > 0 {
					return acceptNil
				}
				value := *(*float32)(unsafe.Pointer(&row[valueOffset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	panic("unreached")
}

func makeMetricFilterFuncSimpleGen(typ Type, filter FilterType) func(value float64, offset int) filterFunc {

	if typ == TypeUint8 && filter == FilterEqual {
		return func(value float64, offset int) filterFunc {
			v := uint8(value)
			return func(row RowBytes) bool {
				return *(*uint8)(unsafe.Pointer(&row[offset])) == v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterNotEqual {
		return func(value float64, offset int) filterFunc {
			v := uint8(value)
			return func(row RowBytes) bool {
				return *(*uint8)(unsafe.Pointer(&row[offset])) != v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterGreaterThan {
		return func(value float64, offset int) filterFunc {
			v := uint8(value)
			return func(row RowBytes) bool {
				return *(*uint8)(unsafe.Pointer(&row[offset])) > v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterGreaterThenOrEqual {
		return func(value float64, offset int) filterFunc {
			v := uint8(value)
			return func(row RowBytes) bool {
				return *(*uint8)(unsafe.Pointer(&row[offset])) >= v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterLessThan {
		return func(value float64, offset int) filterFunc {
			v := uint8(value)
			return func(row RowBytes) bool {
				return *(*uint8)(unsafe.Pointer(&row[offset])) < v
			}
		}
	}
	if typ == TypeUint8 && filter == FilterLessThanOrEqual {
		return func(value float64, offset int) filterFunc {
			v := uint8(value)
			return func(row RowBytes) bool {
				return *(*uint8)(unsafe.Pointer(&row[offset])) <= v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterEqual {
		return func(value float64, offset int) filterFunc {
			v := int8(value)
			return func(row RowBytes) bool {
				return *(*int8)(unsafe.Pointer(&row[offset])) == v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterNotEqual {
		return func(value float64, offset int) filterFunc {
			v := int8(value)
			return func(row RowBytes) bool {
				return *(*int8)(unsafe.Pointer(&row[offset])) != v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterGreaterThan {
		return func(value float64, offset int) filterFunc {
			v := int8(value)
			return func(row RowBytes) bool {
				return *(*int8)(unsafe.Pointer(&row[offset])) > v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterGreaterThenOrEqual {
		return func(value float64, offset int) filterFunc {
			v := int8(value)
			return func(row RowBytes) bool {
				return *(*int8)(unsafe.Pointer(&row[offset])) >= v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterLessThan {
		return func(value float64, offset int) filterFunc {
			v := int8(value)
			return func(row RowBytes) bool {
				return *(*int8)(unsafe.Pointer(&row[offset])) < v
			}
		}
	}
	if typ == TypeInt8 && filter == FilterLessThanOrEqual {
		return func(value float64, offset int) filterFunc {
			v := int8(value)
			return func(row RowBytes) bool {
				return *(*int8)(unsafe.Pointer(&row[offset])) <= v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterEqual {
		return func(value float64, offset int) filterFunc {
			v := uint16(value)
			return func(row RowBytes) bool {
				return *(*uint16)(unsafe.Pointer(&row[offset])) == v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterNotEqual {
		return func(value float64, offset int) filterFunc {
			v := uint16(value)
			return func(row RowBytes) bool {
				return *(*uint16)(unsafe.Pointer(&row[offset])) != v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterGreaterThan {
		return func(value float64, offset int) filterFunc {
			v := uint16(value)
			return func(row RowBytes) bool {
				return *(*uint16)(unsafe.Pointer(&row[offset])) > v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterGreaterThenOrEqual {
		return func(value float64, offset int) filterFunc {
			v := uint16(value)
			return func(row RowBytes) bool {
				return *(*uint16)(unsafe.Pointer(&row[offset])) >= v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterLessThan {
		return func(value float64, offset int) filterFunc {
			v := uint16(value)
			return func(row RowBytes) bool {
				return *(*uint16)(unsafe.Pointer(&row[offset])) < v
			}
		}
	}
	if typ == TypeUint16 && filter == FilterLessThanOrEqual {
		return func(value float64, offset int) filterFunc {
			v := uint16(value)
			return func(row RowBytes) bool {
				return *(*uint16)(unsafe.Pointer(&row[offset])) <= v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterEqual {
		return func(value float64, offset int) filterFunc {
			v := int16(value)
			return func(row RowBytes) bool {
				return *(*int16)(unsafe.Pointer(&row[offset])) == v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterNotEqual {
		return func(value float64, offset int) filterFunc {
			v := int16(value)
			return func(row RowBytes) bool {
				return *(*int16)(unsafe.Pointer(&row[offset])) != v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterGreaterThan {
		return func(value float64, offset int) filterFunc {
			v := int16(value)
			return func(row RowBytes) bool {
				return *(*int16)(unsafe.Pointer(&row[offset])) > v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterGreaterThenOrEqual {
		return func(value float64, offset int) filterFunc {
			v := int16(value)
			return func(row RowBytes) bool {
				return *(*int16)(unsafe.Pointer(&row[offset])) >= v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterLessThan {
		return func(value float64, offset int) filterFunc {
			v := int16(value)
			return func(row RowBytes) bool {
				return *(*int16)(unsafe.Pointer(&row[offset])) < v
			}
		}
	}
	if typ == TypeInt16 && filter == FilterLessThanOrEqual {
		return func(value float64, offset int) filterFunc {
			v := int16(value)
			return func(row RowBytes) bool {
				return *(*int16)(unsafe.Pointer(&row[offset])) <= v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterEqual {
		return func(value float64, offset int) filterFunc {
			v := uint32(value)
			return func(row RowBytes) bool {
				return *(*uint32)(unsafe.Pointer(&row[offset])) == v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterNotEqual {
		return func(value float64, offset int) filterFunc {
			v := uint32(value)
			return func(row RowBytes) bool {
				return *(*uint32)(unsafe.Pointer(&row[offset])) != v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterGreaterThan {
		return func(value float64, offset int) filterFunc {
			v := uint32(value)
			return func(row RowBytes) bool {
				return *(*uint32)(unsafe.Pointer(&row[offset])) > v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterGreaterThenOrEqual {
		return func(value float64, offset int) filterFunc {
			v := uint32(value)
			return func(row RowBytes) bool {
				return *(*uint32)(unsafe.Pointer(&row[offset])) >= v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterLessThan {
		return func(value float64, offset int) filterFunc {
			v := uint32(value)
			return func(row RowBytes) bool {
				return *(*uint32)(unsafe.Pointer(&row[offset])) < v
			}
		}
	}
	if typ == TypeUint32 && filter == FilterLessThanOrEqual {
		return func(value float64, offset int) filterFunc {
			v := uint32(value)
			return func(row RowBytes) bool {
				return *(*uint32)(unsafe.Pointer(&row[offset])) <= v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterEqual {
		return func(value float64, offset int) filterFunc {
			v := int32(value)
			return func(row RowBytes) bool {
				return *(*int32)(unsafe.Pointer(&row[offset])) == v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterNotEqual {
		return func(value float64, offset int) filterFunc {
			v := int32(value)
			return func(row RowBytes) bool {
				return *(*int32)(unsafe.Pointer(&row[offset])) != v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterGreaterThan {
		return func(value float64, offset int) filterFunc {
			v := int32(value)
			return func(row RowBytes) bool {
				return *(*int32)(unsafe.Pointer(&row[offset])) > v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterGreaterThenOrEqual {
		return func(value float64, offset int) filterFunc {
			v := int32(value)
			return func(row RowBytes) bool {
				return *(*int32)(unsafe.Pointer(&row[offset])) >= v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterLessThan {
		return func(value float64, offset int) filterFunc {
			v := int32(value)
			return func(row RowBytes) bool {
				return *(*int32)(unsafe.Pointer(&row[offset])) < v
			}
		}
	}
	if typ == TypeInt32 && filter == FilterLessThanOrEqual {
		return func(value float64, offset int) filterFunc {
			v := int32(value)
			return func(row RowBytes) bool {
				return *(*int32)(unsafe.Pointer(&row[offset])) <= v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterEqual {
		return func(value float64, offset int) filterFunc {
			v := float32(value)
			return func(row RowBytes) bool {
				return *(*float32)(unsafe.Pointer(&row[offset])) == v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterNotEqual {
		return func(value float64, offset int) filterFunc {
			v := float32(value)
			return func(row RowBytes) bool {
				return *(*float32)(unsafe.Pointer(&row[offset])) != v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterGreaterThan {
		return func(value float64, offset int) filterFunc {
			v := float32(value)
			return func(row RowBytes) bool {
				return *(*float32)(unsafe.Pointer(&row[offset])) > v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterGreaterThenOrEqual {
		return func(value float64, offset int) filterFunc {
			v := float32(value)
			return func(row RowBytes) bool {
				return *(*float32)(unsafe.Pointer(&row[offset])) >= v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterLessThan {
		return func(value float64, offset int) filterFunc {
			v := float32(value)
			return func(row RowBytes) bool {
				return *(*float32)(unsafe.Pointer(&row[offset])) < v
			}
		}
	}
	if typ == TypeFloat32 && filter == FilterLessThanOrEqual {
		return func(value float64, offset int) filterFunc {
			v := float32(value)
			return func(row RowBytes) bool {
				return *(*float32)(unsafe.Pointer(&row[offset])) <= v
			}
		}
	}
	panic("unreached")
}

func makeMetricFilterFuncInGen(typ Type) func(floats []float64, offset int) filterFunc {

	if typ == TypeUint8 {
		return func(floats []float64, offset int) filterFunc {
			typedValues := make([]uint8, len(floats))
			for i, f := range floats {
				typedValues[i] = uint8(f)
			}
			return func(row RowBytes) bool {
				value := *(*uint8)(unsafe.Pointer(&row[offset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt8 {
		return func(floats []float64, offset int) filterFunc {
			typedValues := make([]int8, len(floats))
			for i, f := range floats {
				typedValues[i] = int8(f)
			}
			return func(row RowBytes) bool {
				value := *(*int8)(unsafe.Pointer(&row[offset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeUint16 {
		return func(floats []float64, offset int) filterFunc {
			typedValues := make([]uint16, len(floats))
			for i, f := range floats {
				typedValues[i] = uint16(f)
			}
			return func(row RowBytes) bool {
				value := *(*uint16)(unsafe.Pointer(&row[offset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt16 {
		return func(floats []float64, offset int) filterFunc {
			typedValues := make([]int16, len(floats))
			for i, f := range floats {
				typedValues[i] = int16(f)
			}
			return func(row RowBytes) bool {
				value := *(*int16)(unsafe.Pointer(&row[offset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeUint32 {
		return func(floats []float64, offset int) filterFunc {
			typedValues := make([]uint32, len(floats))
			for i, f := range floats {
				typedValues[i] = uint32(f)
			}
			return func(row RowBytes) bool {
				value := *(*uint32)(unsafe.Pointer(&row[offset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeInt32 {
		return func(floats []float64, offset int) filterFunc {
			typedValues := make([]int32, len(floats))
			for i, f := range floats {
				typedValues[i] = int32(f)
			}
			return func(row RowBytes) bool {
				value := *(*int32)(unsafe.Pointer(&row[offset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	if typ == TypeFloat32 {
		return func(floats []float64, offset int) filterFunc {
			typedValues := make([]float32, len(floats))
			for i, f := range floats {
				typedValues[i] = float32(f)
			}
			return func(row RowBytes) bool {
				value := *(*float32)(unsafe.Pointer(&row[offset]))
				for _, v := range typedValues {
					if value == v {
						return true
					}
				}
				return false
			}
		}
	}
	panic("unreached")
}
